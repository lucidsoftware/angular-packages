diff --git a/node_modules/@angular/compiler-cli/ngcc/src/analysis/decoration_analyzer.js b/node_modules/@angular/compiler-cli/ngcc/src/analysis/decoration_analyzer.js
index d6129c6..7a14511 100755
--- a/node_modules/@angular/compiler-cli/ngcc/src/analysis/decoration_analyzer.js
+++ b/node_modules/@angular/compiler-cli/ngcc/src/analysis/decoration_analyzer.js
@@ -98,11 +98,10 @@
             this.injectableRegistry = new metadata_1.InjectableClassRegistry(this.reflectionHost);
             this.handlers = [
                 new annotations_1.ComponentDecoratorHandler(this.reflectionHost, this.evaluator, this.fullRegistry, this.fullMetaReader, this.scopeRegistry, this.scopeRegistry, this.isCore, this.resourceManager, this.rootDirs, !!this.compilerOptions.preserveWhitespaces,
-                /* i18nUseExternalIds */ true, this.bundle.enableI18nLegacyMessageIdFormat, this.moduleResolver, this.cycleAnalyzer, this.refEmitter, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, util_1.NOOP_DEPENDENCY_TRACKER, this.injectableRegistry, /* annotateForClosureCompiler */ false),
+                /* i18nUseExternalIds */ true, this.bundle.enableI18nLegacyMessageIdFormat, this.moduleResolver, this.cycleAnalyzer, this.refEmitter, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, util_1.NOOP_DEPENDENCY_TRACKER, this.injectableRegistry, !!this.compilerOptions.annotateForClosureCompiler),
                 // See the note in ngtsc about why this cast is needed.
                 // clang-format off
-                new annotations_1.DirectiveDecoratorHandler(this.reflectionHost, this.evaluator, this.fullRegistry, this.scopeRegistry, this.fullMetaReader, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, this.injectableRegistry, this.isCore,
-                /* annotateForClosureCompiler */ false),
+                new annotations_1.DirectiveDecoratorHandler(this.reflectionHost, this.evaluator, this.fullRegistry, this.scopeRegistry, this.fullMetaReader, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, this.injectableRegistry, this.isCore, !!this.compilerOptions.annotateForClosureCompiler),
                 // clang-format on
                 // Pipe handler must be before injectable handler in list so pipe factories are printed
                 // before injectable factories (so injectable factories can delegate to them)
@@ -110,10 +109,9 @@
                 new annotations_1.InjectableDecoratorHandler(this.reflectionHost, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, this.isCore,
                 /* strictCtorDeps */ false, this.injectableRegistry, /* errorOnDuplicateProv */ false),
                 new annotations_1.NgModuleDecoratorHandler(this.reflectionHost, this.evaluator, this.fullMetaReader, this.fullRegistry, this.scopeRegistry, this.referencesRegistry, this.isCore, /* routeAnalyzer */ null, this.refEmitter,
-                /* factoryTracker */ null, imports_1.NOOP_DEFAULT_IMPORT_RECORDER,
-                /* annotateForClosureCompiler */ false, this.injectableRegistry),
+                /* factoryTracker */ null, imports_1.NOOP_DEFAULT_IMPORT_RECORDER, !!this.compilerOptions.annotateForClosureCompiler, this.injectableRegistry),
             ];
-            this.compiler = new ngcc_trait_compiler_1.NgccTraitCompiler(this.handlers, this.reflectionHost);
+            this.compiler = new ngcc_trait_compiler_1.NgccTraitCompiler(this.handlers, this.reflectionHost, !!this.compilerOptions.annotateForClosureCompiler);
             this.migrations = [
                 new undecorated_parent_migration_1.UndecoratedParentMigration(),
                 new undecorated_child_migration_1.UndecoratedChildMigration(),
diff --git a/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.d.ts b/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.d.ts
index d8ebc6a..7bec2c7 100755
--- a/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.d.ts
+++ b/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.d.ts
@@ -6,9 +6,11 @@
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
  */
+import { ConstantPool } from '@angular/compiler';
 import * as ts from 'typescript';
 import { ClassDeclaration, Decorator } from '../../../src/ngtsc/reflection';
 import { DecoratorHandler, HandlerFlags, Trait, TraitCompiler } from '../../../src/ngtsc/transform';
+import { CompileResult } from '../../../src/ngtsc/transform/src/api';
 import { NgccReflectionHost } from '../host/ngcc_host';
 /**
  * Specializes the `TraitCompiler` for ngcc purposes. Mainly, this includes an alternative way of
@@ -18,7 +20,8 @@ import { NgccReflectionHost } from '../host/ngcc_host';
  */
 export declare class NgccTraitCompiler extends TraitCompiler {
     private ngccReflector;
-    constructor(handlers: DecoratorHandler<unknown, unknown, unknown>[], ngccReflector: NgccReflectionHost);
+    private annotateForClosureCompiler;
+    constructor(handlers: DecoratorHandler<unknown, unknown, unknown>[], ngccReflector: NgccReflectionHost, annotateForClosureCompiler: boolean);
     get analyzedFiles(): ts.SourceFile[];
     /**
      * Analyzes the source file in search for classes to process. For any class that is found in the
@@ -39,4 +42,5 @@ export declare class NgccTraitCompiler extends TraitCompiler {
      * @param clazz the declaration for which the decorators are returned.
      */
     getAllDecorators(clazz: ClassDeclaration): Decorator[] | null;
+    compile(clazz: ts.Declaration, constantPool: ConstantPool): CompileResult[] | null;
 }
diff --git a/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.js b/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.js
index ea5f3ad..5b88d02 100755
--- a/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.js
+++ b/node_modules/@angular/compiler-cli/ngcc/src/analysis/ngcc_trait_compiler.js
@@ -21,10 +21,11 @@
      */
     var NgccTraitCompiler = /** @class */ (function (_super) {
         tslib_1.__extends(NgccTraitCompiler, _super);
-        function NgccTraitCompiler(handlers, ngccReflector) {
+        function NgccTraitCompiler(handlers, ngccReflector, annotateForClosureCompiler) {
             var _this = _super.call(this, handlers, ngccReflector, perf_1.NOOP_PERF_RECORDER, new NoIncrementalBuild(),
             /* compileNonExportedClasses */ true, new transform_1.DtsTransformRegistry()) || this;
             _this.ngccReflector = ngccReflector;
+            _this.annotateForClosureCompiler = annotateForClosureCompiler;
             return _this;
         }
         Object.defineProperty(NgccTraitCompiler.prototype, "analyzedFiles", {
@@ -96,6 +97,15 @@
             }
             return record.traits.map(function (trait) { return trait.detected.decorator; }).filter(utils_1.isDefined);
         };
+        NgccTraitCompiler.prototype.compile = function (clazz, constantPool) {
+            var compileResults = _super.prototype.compile.call(this, clazz, constantPool);
+            if (compileResults && this.annotateForClosureCompiler) {
+                compileResults.forEach(function (result) {
+                    result.leadingComment = '* @nocollapse ';
+                });
+            }
+            return compileResults;
+        };
         return NgccTraitCompiler;
     }(transform_1.TraitCompiler));
     exports.NgccTraitCompiler = NgccTraitCompiler;
diff --git a/node_modules/@angular/compiler-cli/ngcc/src/rendering/renderer.js b/node_modules/@angular/compiler-cli/ngcc/src/rendering/renderer.js
index 32eb8b3..c304111 100755
--- a/node_modules/@angular/compiler-cli/ngcc/src/rendering/renderer.js
+++ b/node_modules/@angular/compiler-cli/ngcc/src/rendering/renderer.js
@@ -135,7 +135,7 @@
         Renderer.prototype.renderDefinitions = function (sourceFile, compiledClass, imports) {
             var name = this.host.getInternalNameOfClass(compiledClass.declaration);
             var statements = compiledClass.compilation.map(function (c) {
-                return createAssignmentStatement(name, c.name, c.initializer);
+                return createAssignmentStatement(name, c.name, c.initializer, c.leadingComment);
             });
             return this.renderStatements(sourceFile, statements, imports);
         };
@@ -188,9 +188,10 @@
      * compiled decorator to be applied to the class.
      * @param analyzedClass The info about the class whose statement we want to create.
      */
-    function createAssignmentStatement(receiverName, propName, initializer) {
+    function createAssignmentStatement(receiverName, propName, initializer, leadingComment) {
         var receiver = new compiler_1.WrappedNodeExpr(receiverName);
-        return new compiler_1.WritePropExpr(receiver, propName, initializer).toStmt();
+        return new compiler_1.WritePropExpr(receiver, propName, initializer, /* type */ undefined, /* sourceSpan */ undefined, leadingComment)
+            .toStmt();
     }
 });
 //# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
diff --git a/node_modules/@angular/compiler-cli/src/ngtsc/core/src/compiler.js b/node_modules/@angular/compiler-cli/src/ngtsc/core/src/compiler.js
index fd8ee27..b3e4e1c 100755
--- a/node_modules/@angular/compiler-cli/src/ngtsc/core/src/compiler.js
+++ b/node_modules/@angular/compiler-cli/src/ngtsc/core/src/compiler.js
@@ -544,7 +544,7 @@
             // Construct the ReferenceEmitter.
             var refEmitter;
             var aliasingHost = null;
-            if (this.host.unifiedModulesHost === null || !this.options._useHostForImportGeneration) {
+            if (this.host.unifiedModulesHost === null) {
                 var localImportStrategy = void 0;
                 // The strategy used for local, in-project imports depends on whether TS has been configured
                 // with rootDirs. If so, then multiple directories may be mapped in the same "module
diff --git a/node_modules/@angular/compiler-cli/src/ngtsc/transform/src/api.d.ts b/node_modules/@angular/compiler-cli/src/ngtsc/transform/src/api.d.ts
index 72fb5c2..de93560 100755
--- a/node_modules/@angular/compiler-cli/src/ngtsc/transform/src/api.d.ts
+++ b/node_modules/@angular/compiler-cli/src/ngtsc/transform/src/api.d.ts
@@ -165,6 +165,7 @@ export interface CompileResult {
     initializer: Expression;
     statements: Statement[];
     type: Type;
+    leadingComment?: string;
 }
 export interface ResolveResult<R> {
     reexports?: Reexport[];
diff --git a/node_modules/@angular/compiler-cli/src/ngtsc/translator/src/translator.js b/node_modules/@angular/compiler-cli/src/ngtsc/translator/src/translator.js
index ac98866..2799dd5 100755
--- a/node_modules/@angular/compiler-cli/src/ngtsc/translator/src/translator.js
+++ b/node_modules/@angular/compiler-cli/src/ngtsc/translator/src/translator.js
@@ -174,7 +174,12 @@
             return context.isStatement ? result : ts.createParen(result);
         };
         ExpressionTranslatorVisitor.prototype.visitWritePropExpr = function (expr, context) {
-            return ts.createBinary(ts.createPropertyAccess(expr.receiver.visitExpression(this, context), expr.name), ts.SyntaxKind.EqualsToken, expr.value.visitExpression(this, context));
+            var expression = ts.createBinary(ts.createPropertyAccess(expr.receiver.visitExpression(this, context), expr.name), ts.SyntaxKind.EqualsToken, expr.value.visitExpression(this, context));
+            if (expr.leadingComment) {
+                return ts.addSyntheticLeadingComment(expression, ts.SyntaxKind.MultiLineCommentTrivia, expr.leadingComment,
+                /* hasTrailingNewLine */ false);
+            }
+            return expression;
         };
         ExpressionTranslatorVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
             var _this = this;
