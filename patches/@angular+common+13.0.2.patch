diff --git a/node_modules/@angular/common/fesm2015/common.mjs b/node_modules/@angular/common/fesm2015/common.mjs
index 4c0f041..0f22c13 100755
--- a/node_modules/@angular/common/fesm2015/common.mjs
+++ b/node_modules/@angular/common/fesm2015/common.mjs
@@ -819,13 +819,16 @@ const CURRENCIES_EN = { "ADP": [undefined, undefined, 0], "AFN": [undefined, "؋
  *
  * @publicApi
  */
-var NumberFormatStyle;
-(function (NumberFormatStyle) {
-    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
-    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
-    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
-    NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
-})(NumberFormatStyle || (NumberFormatStyle = {}));
+const NumberFormatStyle = {
+    Decimal: 0,
+    Percent: 1,
+    Currency: 2,
+    Scientific: 3,
+};
+NumberFormatStyle[NumberFormatStyle.Decimal] = 'Decimal';
+NumberFormatStyle[NumberFormatStyle.Percent] = 'Percent';
+NumberFormatStyle[NumberFormatStyle.Currency] = 'Currency';
+NumberFormatStyle[NumberFormatStyle.Scientific] = 'Scientific';
 /**
  * Plurality cases used for translating plurals to different languages.
  *
@@ -835,15 +838,20 @@ var NumberFormatStyle;
  *
  * @publicApi
  */
-var Plural;
-(function (Plural) {
-    Plural[Plural["Zero"] = 0] = "Zero";
-    Plural[Plural["One"] = 1] = "One";
-    Plural[Plural["Two"] = 2] = "Two";
-    Plural[Plural["Few"] = 3] = "Few";
-    Plural[Plural["Many"] = 4] = "Many";
-    Plural[Plural["Other"] = 5] = "Other";
-})(Plural || (Plural = {}));
+const Plural = {
+    Zero: 0,
+    One: 1,
+    Two: 2,
+    Few: 3,
+    Many: 4,
+    Other: 5,
+};
+Plural[Plural.Zero] = 'Zero';
+Plural[Plural.One] = 'One';
+Plural[Plural.Two] = 'Two';
+Plural[Plural.Few] = 'Few';
+Plural[Plural.Many] = 'Many';
+Plural[Plural.Other] = 'Other';
 /**
  * Context-dependant translation forms for strings.
  * Typically the standalone version is for the nominative form of the word,
@@ -853,11 +861,12 @@ var Plural;
  *
  * @publicApi
  */
-var FormStyle;
-(function (FormStyle) {
-    FormStyle[FormStyle["Format"] = 0] = "Format";
-    FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
-})(FormStyle || (FormStyle = {}));
+const FormStyle = {
+    Format: 0,
+    Standalone: 1,
+};
+FormStyle[FormStyle.Format] = 'Format';
+FormStyle[FormStyle.Standalone] = 'Standalone';
 /**
  * String widths available for translations.
  * The specific character widths are locale-specific.
@@ -865,17 +874,20 @@ var FormStyle;
  *
  * @publicApi
  */
-var TranslationWidth;
-(function (TranslationWidth) {
+const TranslationWidth = {
     /** 1 character for `en-US`. For example: 'S' */
-    TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
+    Narrow: 0,
     /** 3 characters for `en-US`. For example: 'Sun' */
-    TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
+    Abbreviated: 1,
     /** Full length for `en-US`. For example: "Sunday" */
-    TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
+    Wide: 2,
     /** 2 characters for `en-US`, For example: "Su" */
-    TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
-})(TranslationWidth || (TranslationWidth = {}));
+    Short: 3
+};
+TranslationWidth[TranslationWidth.Narrow] = 'Narrow';
+TranslationWidth[TranslationWidth.Abbreviated] = 'Abbreviated';
+TranslationWidth[TranslationWidth.Wide] = 'Wide';
+TranslationWidth[TranslationWidth.Short] = 'Short';
 /**
  * String widths available for date-time formats.
  * The specific character widths are locale-specific.
@@ -887,29 +899,32 @@ var TranslationWidth;
  * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)
  * @publicApi
  */
-var FormatWidth;
-(function (FormatWidth) {
+const FormatWidth = {
     /**
      * For `en-US`, 'M/d/yy, h:mm a'`
      * (Example: `6/15/15, 9:03 AM`)
      */
-    FormatWidth[FormatWidth["Short"] = 0] = "Short";
+    Short: 0,
     /**
      * For `en-US`, `'MMM d, y, h:mm:ss a'`
      * (Example: `Jun 15, 2015, 9:03:01 AM`)
      */
-    FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
+    Medium: 1,
     /**
      * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
      * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
      */
-    FormatWidth[FormatWidth["Long"] = 2] = "Long";
+    Long: 2,
     /**
      * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
      * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
      */
-    FormatWidth[FormatWidth["Full"] = 3] = "Full";
-})(FormatWidth || (FormatWidth = {}));
+    Full: 3,
+};
+FormatWidth[FormatWidth.Short] = 'Short';
+FormatWidth[FormatWidth.Medium] = 'Medium';
+FormatWidth[FormatWidth.Long] = 'Long';
+FormatWidth[FormatWidth.Full] = 'Full';
 /**
  * Symbols that can be used to replace placeholders in number patterns.
  * Examples are based on `en-US` values.
@@ -919,96 +934,115 @@ var FormatWidth;
  *
  * @publicApi
  */
-var NumberSymbol;
-(function (NumberSymbol) {
+const NumberSymbol = {
     /**
      * Decimal separator.
      * For `en-US`, the dot character.
      * Example: 2,345`.`67
      */
-    NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
+    Decimal: 0,
     /**
      * Grouping separator, typically for thousands.
      * For `en-US`, the comma character.
      * Example: 2`,`345.67
      */
-    NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
+    Group: 1,
     /**
      * List-item separator.
      * Example: "one, two, and three"
      */
-    NumberSymbol[NumberSymbol["List"] = 2] = "List";
+    List: 2,
     /**
      * Sign for percentage (out of 100).
      * Example: 23.4%
      */
-    NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
+    PercentSign: 3,
     /**
      * Sign for positive numbers.
      * Example: +23
      */
-    NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
+    PlusSign: 4,
     /**
      * Sign for negative numbers.
      * Example: -23
      */
-    NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
+    MinusSign: 5,
     /**
      * Computer notation for exponential value (n times a power of 10).
      * Example: 1.2E3
      */
-    NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
+    Exponential: 6,
     /**
      * Human-readable format of exponential.
      * Example: 1.2x103
      */
-    NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
+    SuperscriptingExponent: 7,
     /**
      * Sign for permille (out of 1000).
      * Example: 23.4‰
      */
-    NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
+    PerMille: 8,
     /**
      * Infinity, can be used with plus and minus.
      * Example: ∞, +∞, -∞
      */
-    NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
+    Infinity: 9,
     /**
      * Not a number.
      * Example: NaN
      */
-    NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
+    NaN: 10,
     /**
      * Symbol used between time units.
      * Example: 10:52
      */
-    NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
+    TimeSeparator: 11,
     /**
      * Decimal separator for currency values (fallback to `Decimal`).
      * Example: $2,345.67
      */
-    NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
+    CurrencyDecimal: 12,
     /**
      * Group separator for currency values (fallback to `Group`).
      * Example: $2,345.67
      */
-    NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
-})(NumberSymbol || (NumberSymbol = {}));
+    CurrencyGroup: 13,
+};
+NumberSymbol[NumberSymbol.Decimal] = 'Decimal';
+NumberSymbol[NumberSymbol.Group] = 'Group';
+NumberSymbol[NumberSymbol.List] = 'List';
+NumberSymbol[NumberSymbol.PercentSign] = 'PercentSign';
+NumberSymbol[NumberSymbol.PlusSign] = 'PlusSign';
+NumberSymbol[NumberSymbol.MinusSign] = 'MinusSign';
+NumberSymbol[NumberSymbol.Exponential] = 'Exponential';
+NumberSymbol[NumberSymbol.SuperscriptingExponent] = 'SuperscriptingExponent';
+NumberSymbol[NumberSymbol.PerMille] = 'PerMille';
+NumberSymbol[NumberSymbol.Infinity] = 'Infinity';
+NumberSymbol[NumberSymbol.NaN] = 'NaN';
+NumberSymbol[NumberSymbol.TimeSeparator] = 'TimeSeparator';
+NumberSymbol[NumberSymbol.CurrencyDecimal] = 'CurrencyDecimal';
+NumberSymbol[NumberSymbol.CurrencyGroup] = 'CurrencyGroup';
 /**
  * The value for each day of the week, based on the `en-US` locale
  *
  * @publicApi
  */
-var WeekDay;
-(function (WeekDay) {
-    WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
-    WeekDay[WeekDay["Monday"] = 1] = "Monday";
-    WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
-    WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
-    WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
-    WeekDay[WeekDay["Friday"] = 5] = "Friday";
-    WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
-})(WeekDay || (WeekDay = {}));
+const WeekDay = {
+    Sunday: 0,
+    Monday: 1,
+    Tuesday: 2,
+    Wednesday: 3,
+    Thursday: 4,
+    Friday: 5,
+    Saturday: 6,
+};
+WeekDay[WeekDay.Sunday] = 'Sunday';
+WeekDay[WeekDay.Monday] = 'Monday';
+WeekDay[WeekDay.Tuesday] = 'Tuesday';
+WeekDay[WeekDay.Wednesday] = 'Wednesday';
+WeekDay[WeekDay.Thursday] = 'Thursday';
+WeekDay[WeekDay.Friday] = 'Friday';
+WeekDay[WeekDay.Saturday] = 'Saturday';
 /**
  * Retrieves the locale ID from the currently loaded locale.
  * The loaded locale could be, for example, a global one rather than a regional one.
@@ -1445,31 +1479,44 @@ const ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\
 //    1        2       3         4          5          6          7          8  9     10      11
 const NAMED_FORMATS = {};
 const DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
-var ZoneWidth;
-(function (ZoneWidth) {
-    ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
-    ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
-    ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
-    ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
-})(ZoneWidth || (ZoneWidth = {}));
-var DateType;
-(function (DateType) {
-    DateType[DateType["FullYear"] = 0] = "FullYear";
-    DateType[DateType["Month"] = 1] = "Month";
-    DateType[DateType["Date"] = 2] = "Date";
-    DateType[DateType["Hours"] = 3] = "Hours";
-    DateType[DateType["Minutes"] = 4] = "Minutes";
-    DateType[DateType["Seconds"] = 5] = "Seconds";
-    DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
-    DateType[DateType["Day"] = 7] = "Day";
-})(DateType || (DateType = {}));
-var TranslationType;
-(function (TranslationType) {
-    TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
-    TranslationType[TranslationType["Days"] = 1] = "Days";
-    TranslationType[TranslationType["Months"] = 2] = "Months";
-    TranslationType[TranslationType["Eras"] = 3] = "Eras";
-})(TranslationType || (TranslationType = {}));
+const ZoneWidth = {
+    Short: 0,
+    ShortGMT: 1,
+    Long: 2,
+    Extended: 3,
+};
+ZoneWidth[ZoneWidth.Short] = 'Short';
+ZoneWidth[ZoneWidth.ShortGMT] = 'ShortGMT';
+ZoneWidth[ZoneWidth.Long] = 'Long';
+ZoneWidth[ZoneWidth.Extended] = 'Extended';
+const DateType = {
+    FullYear: 0,
+    Month: 1,
+    Date: 2,
+    Hours: 3,
+    Minutes: 4,
+    Seconds: 5,
+    FractionalSeconds: 6,
+    Day: 7,
+};
+DateType[DateType.FullYear] = 'FullYear';
+DateType[DateType.Month] = 'Month';
+DateType[DateType.Date] = 'Date';
+DateType[DateType.Hours] = 'Hours';
+DateType[DateType.Minutes] = 'Minutes';
+DateType[DateType.Seconds] = 'Seconds';
+DateType[DateType.FractionalSeconds] = 'FractionalSeconds';
+DateType[DateType.Day] = 'Day';
+const TranslationType = {
+    DayPeriods: 0,
+    Days: 1,
+    Months: 2,
+    Eras: 3,
+};
+TranslationType[TranslationType.DayPeriods] = 'DayPeriods';
+TranslationType[TranslationType.Days] = 'Days';
+TranslationType[TranslationType.Months] = 'Months';
+TranslationType[TranslationType.Eras] = 'Eras';
 /**
  * @ngModule CommonModule
  * @description
diff --git a/node_modules/@angular/common/fesm2015/http.mjs b/node_modules/@angular/common/fesm2015/http.mjs
index aabf47f..de55217 100755
--- a/node_modules/@angular/common/fesm2015/http.mjs
+++ b/node_modules/@angular/common/fesm2015/http.mjs
@@ -936,33 +936,38 @@ class HttpRequest {
  *
  * @publicApi
  */
-var HttpEventType;
-(function (HttpEventType) {
+const HttpEventType = {
     /**
      * The request was sent out over the wire.
      */
-    HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
+    Sent: 0,
     /**
      * An upload progress event was received.
      */
-    HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
+    UploadProgress: 1,
     /**
      * The response status code and headers were received.
      */
-    HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
+    ResponseHeader: 2,
     /**
      * A download progress event was received.
      */
-    HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
+    DownloadProgress: 3,
     /**
      * The full response including the body was received.
      */
-    HttpEventType[HttpEventType["Response"] = 4] = "Response";
+    Response: 4,
     /**
      * A custom event from an interceptor or a backend.
      */
-    HttpEventType[HttpEventType["User"] = 5] = "User";
-})(HttpEventType || (HttpEventType = {}));
+    User: 5,
+};
+HttpEventType[HttpEventType.Sent] = 'Sent';
+HttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';
+HttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';
+HttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';
+HttpEventType[HttpEventType.Response] = 'Response';
+HttpEventType[HttpEventType.User] = 'User';
 /**
  * Base class for both `HttpResponse` and `HttpHeaderResponse`.
  *
